name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://${{ secrets.EC2_HOST }}  # ✅ Fixed
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}         # ✅ Fixed
          username: ${{ secrets.EC2_USERNAME }}  # ✅ Fixed
          key: ${{ secrets.EC2_SSH_KEY }}        # ✅ Fixed
          script: |
            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
                docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            # Stop existing container
            docker stop my-app || true
            docker rm my-app || true
            
            # Pull and run latest image
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            docker run -d -p 80:4000 --name my-app \
              ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
